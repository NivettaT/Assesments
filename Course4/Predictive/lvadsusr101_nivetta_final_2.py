# -*- coding: utf-8 -*-
"""LVADSUSR101_Nivetta_Final_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/175kM56rUwXB8wmCiQWI9otHWIhseX1by
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import warnings as wr
wr.filterwarnings("ignore")

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score, mean_squared_error

# data read
data1 = pd.read_csv('/content/auto-mpg.csv')
data1.info()
data1.describe()
data1.head(5)

# duplicate check
dup_no = data1.duplicated().sum()
print('Total number of duplicated records: ', dup_no)
# drop duplicates if exist
data1 = data1.drop_duplicates()

# null check
data1.isnull().sum()

# null handling
data_n = data1.fillna(data1.mean())
data_n['horsepower'] = data_n['horsepower'].fillna(method = 'ffill') # as it is of object type
# check if changes has been reflected
data_n.isnull().sum()

# outliers check
q1 = data_n.quantile(0.25)
q3 = data_n.quantile(0.75)
IQR = q3 - q1
threshold = 1.5
outliers = (data_n < (q1 - threshold * IQR)) | (data_n > (q3 + threshold * IQR))
data = data_n[~outliers.any(axis=1)]
print('Number of outliers removed: ', len(data_n) - len(data))

# basic eda
# Plot histograms for each feature
for i in data.drop('car name', axis = 1):
    plt.figure()
    sns.histplot(data[i], kde=True)
    plt.title(f'Histogram of {i}')
    plt.xlabel(i)
    plt.ylabel('Frequency')
    plt.show()

plt.figure(figsize=(12, 6))
numerical_cols = ['cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 3, i)
    sns.scatterplot(x=col, y='mpg', data=data)
    plt.title(f'{col} vs. mpg')
plt.tight_layout()
plt.show()

# car name is not going to have an effect on the target var mpg, so dropping it
data = data.drop('car name', axis = 1)
data.head()

# corr Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

data['horsepower'] = data['horsepower'].replace('?', np.nan)
data['horsepower'] = pd.to_numeric(data['horsepower'], errors='coerce')
data['horsepower'].fillna(data['horsepower'].mean(), inplace=True)

# extract feature and labels
X = data.drop(['mpg'], axis=1)
y = data['mpg']

# train test splits
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# model build using Logistic Reg
model = LinearRegression()
model.fit(X_train, y_train)
pred_lr = model.predict(X_test)

# evaluation
y_pred = model.predict(X_test)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared:", r2_score(y_test, y_pred))